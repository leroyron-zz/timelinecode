{"version":3,"sources":["../../../node_modules/browser-pack/_prelude.js","index.ts","timeline.code.ts","timeline.custom.ts","timeline.scale.ts","timeline.ts"],"names":[],"mappings":"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","file":"timelinecode.js","sourcesContent":["(function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()","import { timeline } from \"./timeline\";\nimport \"./timeline.code\";\nimport \"./timeline.scale\";\nimport \"./timeline.custom\";\n\n/** \n * User: Use new TIMELINE() - {name:, length:}\n * @function TIMELINE - set name and/or length buffer/time of timeline\n */\n/** TIMELINE entry */\nexport = function TIMELINE() {\n    var options = new Array(\n        {'name': \"timeline\"},\n        {'length': !isNaN(arguments[0]) ? arguments[0] | 0 : 1000}\n    )\n\n    new timeline.construct(this, arguments, options)\n}\n","import { timeline } from \"./timeline\";\n/** User: Use .code() - to set up the GUI and access for the timeline */\nexport class code {\n    /**\n     * @param This - The object Modal\n     * @param args - Object arguements{} thrown in by User:\n     */\n    constructor(This: object, args: any) {\n        var options = new Array(\n            {'code': {}},\n            {'gui': [\n                {'container': typeof document != 'undefined' ? document.body : null},// nodejs requires typeof 'undefined'\n                {'x': 0},\n                {'y': 0},\n                {'width': undefined},\n                {'height': undefined},\n                {'ctx': {}}\n            ]},\n            {'access': access} \n        )\n        /**\n         * User: Use .access() control the behavior and Data of timeline\n         */\n        function access () { new accessChain(this, arguments); return this }\n        \n        new timeline.construct(This, args, options)\n    }\n}\ntimeline.construct.addon.push({name: \"code\", class: code})\n\nclass accessChain {\n    /**\n     * User: Use .access() control the behavior and Data of timeline\n     * @param This - The object Modal\n     * @param args - Object arguements{} thrown in by User:\n     */\n    constructor(This: object, args: any) {\n        var options = new Array(\n            {'access': [\n                {'continuance': true},\n                {'skip': 0}, \n                {'rCount': 0}, \n                {'tCount': 0}, \n                {'revert': true}, \n                {'mCount': 0}, \n                {'leap': -999999}, \n                {'reset': false}\n            ]}\n        )\n        \n        new timeline.construct(This, args, options)\n    }\n}","import { timeline } from \"./timeline\";\n/** User: Use .custom() - ... */\nexport class custom {\n    /**\n    * @param This - The object Modal\n    * @param args - Object arguements{} thrown in by User:\n    */\n    constructor(This: object, args: any) {\n        var date = new Date()\n        var options = new Array(\n            {'custom1': [\n                {'gui': [\n                    {'container': typeof document != 'undefined' ? \n                    document.body : null},\n                    {'x': 0},\n                    {'y': 0},\n                    {'width': undefined},\n                    {'height': undefined},\n                    {'ctx': {}}\n                ]}\n            ]},\n            {'custom2': {}}\n        )\n        \n        new timeline.construct(This, args, options)\n    }\n}\ntimeline.construct.addon.push({name: \"custom\", class: custom})","import { timeline } from \"./timeline\";\n/** User: Use .scale() - to set up the GUI, scale and calendar functionality for timeline control */\nexport class scale {\n    /**\n     * @param This - The object Modal\n     * @param args - Object arguements{} thrown in by User:\n     */\n    constructor(This: object, args: any) {\n        var date = new Date()\n        var options = new Array(\n            {'scale': [\n                {'gui': [\n                    {'container': typeof document != 'undefined' ? document.body : null},\n                    {'x': 0},\n                    {'y': 0},\n                    {'width': undefined},\n                    {'height': undefined},\n                    {'ctx': {}}\n                ]},\n                {'phase':'year'}\n            ]},\n            {'current': [\n                {'year': date.getFullYear()}, \n                {'month': date.getMonth() + 1},\n                {'day': date.getDate() + 1},\n                {'hour': date.getHours()},\n                {'minute': date.getMinutes()},\n                {'second': date.getSeconds()},\n                {'millisecond': date.getMilliseconds() / 10 >> 0},\n                {'hour24Format': false}\n            ]}\n        )\n        \n        new timeline.construct(This, args, options)\n    }\n}\ntimeline.construct.addon.push({name: \"scale\", class: scale})","/** Dev: Use .construct() - flexable object Modal builder - for users to throw in objects {} */\nexport namespace timeline {\n    /** Dev: Use .addon() - Add your class to The object Modal chained modularity */\n    export class construct {\n        /** Dev: Use .push() - Add a {name: <string> and class: <class>} to Array for chained modal build  */\n        static addon: Array<any> = [];\n        // Object Oriented Class Constructor\n        // Pair up object arguements\n        /**\n         * @param This - The object Modal\n         * @param args - Object arguements{} thrown in by User:\n         * @param options - The options [{}] set by Dev: to pair with arguements{} thrown in by User:\n         */\n        constructor(This: object, args: any, options: Array<any>) {\n            var construct = function (This: object, args: any, options: Array<any>) {\n                for (var o = 0; o < options.length; o++) {\n                    var option = options[o]\n                    var key = Object.keys(option)[0]\n                    This[key] = option[key]\n                    if (Array.isArray(option[key])) {\n                        construct(This[key] = {}, args, option[key])\n                    } else {\n                        for (var a = 0; a < args.length; a++) {\n                            var arg = args[a]\n                            if (typeof arg == 'object') {\n                                Object.keys(arg).forEach(function (key: any) {\n                                    if (option[key]) { \n                                        This[key] = arg[key]\n                                    }\n                                });\n                            }\n                        }\n                    }\n                }\n            }\n            construct(This, args, options)\n            new addon(This)\n        }\n    }\n\n    /**\n     * @param This - The object Modal building for chained modularity\n     */\n    class addon {\n        /**\n         * @param This - The object Modal building for chained modularity\n         */\n        constructor (This: object){\n            for (var a = 0; a < construct.addon.length; a++) {\n                if (!This[construct.addon[a].name])\n                /**\n                 * @param _name - The name of the addon\n                 * @param _class - The class of the addon\n                 */\n                (function (_name, _class) {\n                    /** chained name .() */\n                    var methodAddonName = _name\n                    /** chained class */\n                    var constructClass = _class\n                    /** index just incase */\n                    var index = a\n                    /**\n                     * ...\n                     */\n                    This[methodAddonName] = function () {\n                        // construct.addon.splice(index, 1)\n                        new constructClass(this, arguments)\n                        /** return modal */\n                        return this\n                    }\n                })(construct.addon[a].name, construct.addon[a].class)\n             }\n        }\n    }\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}